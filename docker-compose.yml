version: '3.8'

services:
  attendance-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: attendance-system
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - attendance-network
    volumes:
      # Data persistence
      - attendance-data:/app/data
      - attendance-logs:/app/logs
      # For development, uncomment to mount source code
      # - .:/app
      # - /app/node_modules
    environment:
      - NODE_ENV=production
      # Add your environment variables here
      # - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      # - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      # - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    # Resource constraints for DS223J (512MB RAM, 0.5 CPU cores)
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    # Health check configuration
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache

  # Optional: Add a database service if needed
  # postgres:
  #   image: postgres:14-alpine
  #   container_name: attendance-db
  #   restart: unless-stopped
  #   networks:
  #     - attendance-network
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   # Resource constraints for DS223J
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.3'
  #         memory: 256M
  #       reservations:
  #         cpus: '0.1'
  #         memory: 128M
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # Optional: Add Redis for caching if needed
  # redis:
  #   image: redis:7-alpine
  #   container_name: attendance-redis
  #   restart: unless-stopped
  #   networks:
  #     - attendance-network
  #   volumes:
  #     - redis-data:/data
  #   # Resource constraints for DS223J
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.2'
  #         memory: 128M
  #       reservations:
  #         cpus: '0.1'
  #         memory: 64M
  #   ports:
  #     - "6379:6379"
  #   command: redis-server --appendonly yes --maxmemory 64mb --maxmemory-policy allkeys-lru
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

networks:
  attendance-network:
    driver: bridge

volumes:
  attendance-data:
    driver: local
  attendance-logs:
    driver: local
  # postgres-data:
  #   driver: local
  # redis-data:
  #   driver: local